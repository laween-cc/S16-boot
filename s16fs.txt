S16 file system:
A simple file system for S16 to make logic more simple.

The file system does not support sub directories!
The file system does not support files > 64KiB!

Each volume must have a boot sector with a data area.
The volume must not be bigger than ~32MB.

The storage device MUST have 512e or 512 byte sectors!
The boot sector must always start at sector offset 0.
The root must always start at sector offset 1.
The reserved sectors for sector entries MUST be right after the root.

BOOT SECTOR:

0000h - machine code - 494 bytes
01F3h - data area - 16 bytes
01FEh - boot signature - 2 bytes

DATA AREA:

0000h - volume name - 11 bytes
000Bh - root sectors (1 - 32) - 1 byte
000Ch - sectors reserved for sector entries - (1 - 32) - 1 byte
000Dh - absolute total volume sectors (0 - X) - 2 bytes
000Fh - sectors per chunk (1 - 8) - 1 byte

The file system uses CHUNKS to store files effectively.

The file system has 2 types of entries. One being a normal entry for files and the other to get the fragmented chunks of the file!

A normal entry is used for files, it has a field with 8 absolute starting sectors of the files chunk (each sector being 2 bytes), and a 2 byte field that points
to a sector entry in case there are more chunks of the file.

A sector entry is used to get more of the fragmented chunks then a normal entry provides and
connects to a chain starting from a normal entry to the final sector entry.

The normal entry resides within root.

The sector entries have there own reserved section after the root.

NORMAL ENTRY:

0000h - file name - 8 bytes (if first byte is E5h then this is a deleted file! If first byte is 00h then stop reading as there are no more entries)
0008h - extension - 3 bytes
000Bh - file size - 2 bytes
000Dh - attribute - 1 byte
000Eh - absolute starting sectors of the files chunks - 16 bytes (contains 2 byte fields for each absolute sector! There are only 8 absolute sectors)
001Eh - sector entry - 2 bytes (The absolute starting sector of a sector entry to continue reading from! Will be 0000h if no sector entry)
TOTAL BYTES: 32

SECTOR ENTRY:

0000h - indicator - 1 byte (Will be CBh, but if its 00h then stop reading as there are no more entries)
0001h - reserved - 1 byte
0002h - absolute starting sectors of a files chunks - 28 bytes (contains 2 byte fields for each absolute sector. There are 14 absolute sectors)
001Eh - sector entry - 2 bytes (The absolute starting sector of a sector entry to continue reading from! Will be 0000h if no sector entry)
TOTAL BYTES: 32

IF one of the absolute starting sector is 0000h. THEN STOP! THERE ARE NO MORE SECTORS AND THIS IS A INVALID SECTOR!
IF one of the pointers to a sector entry is 0000h. THEN STOP! THE CHAIN HAS ENDED AND THERE ARE NO MORE SECTORS TO READ!

INDICATOR BYTES:
You should check for these bytes at the start of every entry. Normal entry and sector entry.

00h - no more entries in root
E5h - deleted entry (feel free to overwrite)
CBh - sector entry

ATTRIBUTES:

0 0 0 0 1 1 1 1 B
| | | | | | | |
| | | | | | | ------ READ-ONLY
| | | | | | -------- SYSTEM
| | | | | ---------- HIDDEN
| | | | ------------ EXECUTABLE
-------------------- RESERVED

STANDARD:

640KiB:
Root secotrs = 16
Reserved sectors for sector entries = 16
Sectors per chunk = 2
Total volume sectors = 0 - 1279

1.44MB:
Root sectors = 16
Reserved sectors for sector entries = 16
Sectors per chunk = 2
Total volume sectors = 0 - 2879

~32MB:
Root sectors = 32
Reserved sectors for sector entries = 32
Sectors per chunk = 4 (or 8)
Total volume = 0 - 65535

EXAMPLE LAYOUT FOR 1.44MB:

SECTOR OFFSET 0 - BOOT SECTOR - 1 SECTOR

SECTOR OFFSET 1 - ROOT DIRECTORY - 16 SECTORS

SECTOR OFFSET 17 - SECTORS RESERVED FOR SECTOR ENTRIES - 16 SECTORS

SECTOR OFFSET 33 - FILE CONTENT (CHUNKS)

